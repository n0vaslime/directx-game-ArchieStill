//Vertex Buffer Game Objects
FileVBGO* terrainBox = new FileVBGO("terrainTex", m_d3dDevice.Get());
m_GameObjects.push_back(terrainBox);

FileVBGO* Box = new FileVBGO("cube", m_d3dDevice.Get());
m_GameObjects.push_back(Box);
Box->SetPos(Vector3(0.0f, 0.0f, -100.0f));
Box->SetPitch(XM_PIDIV4);
Box->SetScale(20.0f);

VBCube* cube = new VBCube();
cube->init(11, m_d3dDevice.Get());
cube->SetPos(Vector3(100.0f, 0.0f, 0.0f));
cube->SetScale(4.0f);
m_GameObjects.push_back(cube);
Terrain* wall = new Terrain("cube", m_d3dDevice.Get(), m_fxFactory, Vector3(100.0f, 0.0f, 100.0f), 0.0f, 0.0f, 0.0f, 0.25f * Vector3::One);
m_GameObjects.push_back(wall);
m_ColliderObjects.push_back(wall);

VBSpike* spikes = new VBSpike();
spikes->init(11, m_d3dDevice.Get());
spikes->SetPos(Vector3(0.0f, 0.0f, 100.0f));
spikes->SetScale(4.0f);
m_GameObjects.push_back(spikes);

VBSpiral* spiral = new VBSpiral();
spiral->init(11, m_d3dDevice.Get());
spiral->SetPos(Vector3(-100.0f, 0.0f, 0.0f));
spiral->SetScale(4.0f);
m_GameObjects.push_back(spiral);

VBPillow* pillow = new VBPillow();
pillow->init(11, m_d3dDevice.Get());
pillow->SetPos(Vector3(-100.0f, 0.0f, -100.0f));
pillow->SetScale(4.0f);
m_GameObjects.push_back(pillow);

VBSnail* snail = new VBSnail(m_d3dDevice.Get(), "shell", 150, 0.98f, 0.09f * XM_PI, 0.4f, Color(1.0f, 0.0f, 0.0f, 1.0f), Color(0.0f, 0.0f, 1.0f, 1.0f));
snail->SetPos(Vector3(-100.0f, 0.0f, 100.0f));
snail->SetScale(2.0f);
m_GameObjects.push_back(snail);

//Marching Cubes
VBMarchCubes* VBMC = new VBMarchCubes();
VBMC->init(Vector3(-8.0f, -8.0f, -17.0f), Vector3(8.0f, 8.0f, 23.0f), 60.0f * Vector3::One, 0.01, m_d3dDevice.Get());
VBMC->SetPos(Vector3(100, 0, -100));
VBMC->SetPitch(-XM_PIDIV2);
VBMC->SetScale(Vector3(3, 3, 1.5));
m_GameObjects.push_back(VBMC);





//test all GPGOs
float* params = new float[3];

params[0] = 250.f; params[1] = 10.f; params[2] = 250.f;
GPGO* pGPGO = new GPGO(m_d3dContext.Get(), GPGO_BOX, (float*)&Colors::DarkSeaGreen, params);
pGPGO->SetPos(Vector3(0.f, -2.5f, 0.f));
m_GameObjects.push_back(pGPGO);

params[0] = 10.f;  params[1] = 20.0f; params[2] = 30.f;
GPGO* pGPGO = new GPGO(m_d3dContext.Get(), GPGO_BOX, (float*)&Colors::Azure, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, -100.f));
m_GameObjects.push_back(pGPGO);
params[0] = params[1] = 20.0f; params[2] = (size_t)32;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_CONE, (float*)&Colors::Navy,params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, -70.f));
m_GameObjects.push_back(pGPGO);
params[0] = 15.0f;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_CUBE, (float*)&Colors::SeaGreen, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, -40.f));
m_GameObjects.push_back(pGPGO);
params[0] = params[1] = 20.0f; params[2] = (size_t)32;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_CYLINDER, (float*)&Colors::OliveDrab, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, -10.f));
m_GameObjects.push_back(pGPGO);
params[0] = 15.0f;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_DODECAHEDRON, (float*)&Colors::OrangeRed,params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 20.f));
m_GameObjects.push_back(pGPGO);
params[0] =  15.0f; params[1] = (size_t)3;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_GEOSPHERE, (float*)&Colors::BlueViolet, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 50.f));
m_GameObjects.push_back(pGPGO);
params[0] = 20;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_ICOSAHEDRON, (float*)&Colors::DodgerBlue, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 80.f));
m_GameObjects.push_back(pGPGO);
params[0] = 20;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_OCTAHEDRON, (float*)&Colors::PaleTurquoise, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 110.f));
m_GameObjects.push_back(pGPGO);
params[0] = 15.0f; params[1] = (size_t)16;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_SPHERE, (float*)&Colors::LawnGreen, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 140.0));
m_GameObjects.push_back(pGPGO);
params[0] = 15.0f; params[1] = (size_t)8;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_TEAPOT, (float*)&Colors::YellowGreen, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 170.0f));
m_GameObjects.push_back(pGPGO);
params[0] = 20;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_TETRAHEDRON, (float*)&Colors::Firebrick, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 200.f));
m_GameObjects.push_back(pGPGO);
params[0] = 30.0f; params[1] = 10.0f; params[2] = (size_t)32;
pGPGO = new GPGO(m_d3dContext.Get(), GPGO_TORUS, (float*)&Colors::Aquamarine, params);
pGPGO->SetPos(Vector3(-50.0f, 10.0f, 230.f));
m_GameObjects.push_back(pGPGO);